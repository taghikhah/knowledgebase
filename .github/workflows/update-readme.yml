name: Update README from YAML

on:
  push:
    branches: [main]
    paths: ['data/resources.yaml']
  pull_request:
    branches: [main]
    paths: ['data/resources.yaml']
  schedule:
    # Update weekly to refresh GitHub stars and check links
    - cron: '0 6 * * 1' # Every Monday at 6 AM UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Resources

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Validate YAML schema
        run: python scripts/validate.py

      - name: Check for validation errors
        run: |
          if [ $? -ne 0 ]; then
            echo "‚ùå Validation failed. Please fix errors in resources.yaml"
            exit 1
          else
            echo "‚úÖ Validation passed!"
          fi

  update-readme:
    runs-on: ubuntu-latest
    name: Update README
    needs: validate
    if: github.event_name != 'pull_request' # Only run on main branch, not PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Fetch GitHub stars (if scheduled)
        if: github.event_name == 'schedule'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üåü Updating GitHub stars..."
          python - << 'EOF'
          import yaml
          import requests
          import json
          import os
          from pathlib import Path

          # Load resources
          with open('data/resources.yaml', 'r') as f:
              data = yaml.safe_load(f)

          # GitHub API headers
          headers = {
              'Authorization': f'token {os.environ["GITHUB_TOKEN"]}',
              'Accept': 'application/vnd.github.v3+json'
          }

          updated = False

          for resource in data['resources']:
              url = resource.get('url', '')
              if 'github.com' in url and '/tree/' not in url and '/blob/' not in url:
                  # Extract owner/repo from GitHub URL
                  try:
                      parts = url.replace('https://github.com/', '').strip('/').split('/')
                      if len(parts) >= 2:
                          owner, repo = parts[0], parts[1]
                          
                          # Fetch current stars
                          api_url = f'https://api.github.com/repos/{owner}/{repo}'
                          response = requests.get(api_url, headers=headers, timeout=10)
                          
                          if response.status_code == 200:
                              repo_data = response.json()
                              new_stars = repo_data.get('stargazers_count', 0)
                              old_stars = resource.get('github_stars', 0)
                              
                              if new_stars != old_stars:
                                  resource['github_stars'] = new_stars
                                  updated = True
                                  print(f"Updated {resource['id']}: {old_stars} -> {new_stars} stars")
                          else:
                              print(f"Failed to fetch stars for {resource['id']}: {response.status_code}")
                              
                  except Exception as e:
                      print(f"Error updating {resource['id']}: {e}")

          # Save updated data
          if updated:
              with open('data/resources.yaml', 'w') as f:
                  yaml.dump(data, f, default_flow_style=False, sort_keys=False)
              print(f"‚úÖ Updated star counts for {sum(1 for r in data['resources'] if 'github_stars' in r)} repositories")
          else:
              print("‚ÑπÔ∏è No star count updates needed")
          EOF

      - name: Generate README.md
        run: |
          echo "üìù Generating README.md from resources.yaml..."
          python scripts/generate.py

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD README.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to README.md"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù README.md has been updated"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add README.md

          if [ "${{ github.event_name }}" = "schedule" ]; then
            git add data/resources.yaml  # Also commit star updates
            git commit -m "ü§ñ Auto-update README.md and refresh GitHub stars"
          else
            git commit -m "ü§ñ Auto-update README.md from resources.yaml"
          fi

          git push

  check-links:
    runs-on: ubuntu-latest
    name: Check Links
    if: github.event_name == 'schedule' # Only run weekly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Check link accessibility
        run: |
          echo "üîó Checking link accessibility..."
          python - << 'EOF'
          import yaml
          import requests
          from pathlib import Path
          import sys

          def check_url(url, timeout=10):
              try:
                  response = requests.head(url, timeout=timeout, allow_redirects=True)
                  return response.status_code < 400
              except:
                  try:
                      response = requests.get(url, timeout=timeout, allow_redirects=True)
                      return response.status_code < 400
                  except:
                      return False

          # Load resources
          with open('data/resources.yaml', 'r') as f:
              data = yaml.safe_load(f)

          broken_links = []
          total_checked = 0

          for resource in data['resources']:
              url = resource.get('url')
              if url:
                  total_checked += 1
                  if not check_url(url):
                      broken_links.append({
                          'id': resource.get('id'),
                          'title': resource.get('title'),
                          'url': url
                      })
                      print(f"‚ùå Broken link in {resource.get('id')}: {url}")
                  else:
                      print(f"‚úÖ {resource.get('id')}: OK")

          print(f"\nüìä Link Check Results:")
          print(f"  ‚Ä¢ Total links checked: {total_checked}")
          print(f"  ‚Ä¢ Broken links found: {len(broken_links)}")

          if broken_links:
              print(f"\n‚ùå Broken Links:")
              for link in broken_links:
                  print(f"  ‚Ä¢ {link['id']}: {link['url']}")
              
              # Create an issue for broken links
              issue_body = "## üîó Broken Links Detected\\n\\n"
              issue_body += "The weekly link check found the following broken links:\\n\\n"
              for link in broken_links:
                  issue_body += f"- **{link['title']}** (`{link['id']}`): {link['url']}\\n"
              issue_body += "\\n*This issue was automatically created by the link checker workflow.*"
              
              print(f"\nüìù Issue body prepared for broken links")
              # Note: Creating GitHub issues requires additional permissions
              # For now, just report in the workflow log
              
          else:
              print(f"\nüéâ All links are working!")
          EOF

  pr-validation:
    runs-on: ubuntu-latest
    name: PR Validation
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Validate resources
        run: |
          echo "üîç Validating resources for PR..."
          python scripts/validate.py

      - name: Generate preview README
        run: |
          echo "üëÄ Generating preview README..."
          python scripts/generate.py

      - name: Show README diff
        run: |
          echo "üìù README.md changes:"
          git diff --no-index README.md README.md.new || true

      - name: Validate new entries
        run: |
          echo "üÜï Checking for new entries..."
          python - << 'EOF'
          import yaml

          try:
              with open('data/resources.yaml', 'r') as f:
                  data = yaml.safe_load(f)
              
              new_resources = [r for r in data['resources'] if r.get('added') == '2024-09-22']
              
              if new_resources:
                  print(f"üéâ Found {len(new_resources)} new resource(s):")
                  for resource in new_resources:
                      print(f"  ‚Ä¢ {resource.get('title')} ({resource.get('id')})")
                      print(f"    Domain: {', '.join(resource.get('domain', []))}")
                      print(f"    Maturity: {resource.get('maturity')}")
                      print(f"    Summary: {resource.get('summary')[:100]}...")
                      print()
              else:
                  print("‚ÑπÔ∏è No new resources detected in this PR")
                  
          except Exception as e:
              print(f"Error checking new entries: {e}")
          EOF
