name: Update README from YAML

on:
  push:
    branches: [main]
    paths: ['data/resources.yaml', 'data/schema.json', 'data/tags.txt']
  pull_request:
    branches: [main]
    paths: ['data/resources.yaml', 'data/schema.json', 'data/tags.txt']
  schedule:
    # Update weekly to refresh GitHub stars and check links
    - cron: '0 6 * * 1' # Every Monday at 6 AM UTC
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Resources
    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests jsonschema

      - name: Validate YAML schema and content
        id: validate
        run: |
          echo "üîç Validating resources.yaml..."
          if python scripts/validate.py; then
            echo "‚úÖ Validation passed!"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Validation failed!"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  update-readme:
    runs-on: ubuntu-latest
    name: Update README
    needs: validate
    if: github.event_name != 'pull_request' && needs.validate.outputs.validation-passed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests jsonschema

      - name: Update GitHub stars
        if: github.event_name == 'schedule'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üåü Updating GitHub stars..."
          python scripts/update_stars.py

      - name: Generate README.md
        run: |
          echo "üìù Generating README.md from resources.yaml..."
          python scripts/generate.py

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD README.md data/resources.yaml; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù Changes detected in README.md or resources.yaml"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add README.md

          if [ "${{ github.event_name }}" = "schedule" ]; then
            git add data/resources.yaml  # Also commit star updates
            git commit -m "ü§ñ Auto-update README.md and refresh GitHub stars

            - Updated README.md from resources.yaml
            - Refreshed GitHub star counts
            - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          else
            git commit -m "ü§ñ Auto-update README.md from resources.yaml

            - Generated from updated resources.yaml
            - Updated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          fi

          git push

  check-links:
    runs-on: ubuntu-latest
    name: Check Links
    if: github.event_name == 'schedule' # Only run weekly

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Check link accessibility
        run: |
          echo "üîó Checking link accessibility..."
          python scripts/check_links.py

      - name: Create issue for broken links
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if broken links file exists
            if (fs.existsSync('broken_links.json')) {
              const brokenLinks = JSON.parse(fs.readFileSync('broken_links.json', 'utf8'));

              if (brokenLinks.length > 0) {
                let issueBody = `## üîó Broken Links Detected\n\n`;
                issueBody += `The weekly link check found ${brokenLinks.length} broken link(s):\n\n`;

                for (const link of brokenLinks) {
                  issueBody += `- **${link.title}** (\`${link.id}\`): ${link.url}\n`;
                  issueBody += `  - Status: ${link.status}\n`;
                  issueBody += `  - Error: ${link.error || 'N/A'}\n\n`;
                }

                issueBody += `\n---\n*This issue was automatically created by the link checker workflow.*`;

                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `üîó Broken Links Detected - ${new Date().toISOString().split('T')[0]}`,
                  body: issueBody,
                  labels: ['broken-links', 'maintenance']
                });
              }
            }

  validate-pr:
    runs-on: ubuntu-latest
    name: PR Validation
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests jsonschema

      - name: Validate resources
        run: |
          echo "üîç Validating resources for PR..."
          python scripts/validate.py

      - name: Generate preview README
        run: |
          echo "üëÄ Generating preview README..."
          python scripts/generate.py

      - name: Show README diff
        run: |
          echo "üìù README.md changes:"
          if ! git diff --quiet HEAD README.md; then
            git diff --no-index README.md README.md.backup 2>/dev/null || git diff HEAD README.md
          else
            echo "‚ÑπÔ∏è No changes to README.md"
          fi

      - name: Analyze changes
        run: |
          echo "üîç Analyzing resource changes..."
          python scripts/analyze_changes.py

      - name: Comment PR with preview
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check if analysis results exist
            if (fs.existsSync('pr_analysis.json')) {
              const analysis = JSON.parse(fs.readFileSync('pr_analysis.json', 'utf8'));

              let comment = `## üìã PR Analysis\n\n`;

              if (analysis.new_resources.length > 0) {
                comment += `### üÜï New Resources (${analysis.new_resources.length})\n\n`;
                for (const resource of analysis.new_resources) {
                  comment += `- **${resource.title}** (${resource.id})\n`;
                  comment += `  - Domains: ${resource.domains.join(', ')}\n`;
                  comment += `  - Maturity: ${resource.maturity}\n`;
                  comment += `  - Summary: ${resource.summary.substring(0, 100)}...\n\n`;
                }
              }

              if (analysis.modified_resources.length > 0) {
                comment += `### ‚úèÔ∏è Modified Resources (${analysis.modified_resources.length})\n\n`;
                for (const resource of analysis.modified_resources) {
                  comment += `- **${resource.title}** (${resource.id})\n`;
                }
                comment += `\n`;
              }

              if (analysis.validation_warnings.length > 0) {
                comment += `### ‚ö†Ô∏è Validation Warnings\n\n`;
                for (const warning of analysis.validation_warnings) {
                  comment += `- ${warning}\n`;
                }
                comment += `\n`;
              }

              comment += `---\n*Auto-generated by GitHub Actions*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }